> миша:
`
#include <random>  // Подключаем библиотеку для генерации случайных чисел
#include <fstream>  // Для записи данных в файл
#include <iostream>  // Для вывода данных в консоль

// Абстрактный базовый класс для кубиков и их производных
struct AbstractDice {
    virtual ~AbstractDice() {}  // Виртуальный деструктор для корректного удаления объектов через указатель базового класса
    virtual unsigned roll() = 0;  // Чисто виртуальный метод roll для броска кубика
};

// Класс Dice моделирует бросок кубика с количеством граней max
class Dice : public AbstractDice {
public:
    // Конструктор принимает максимальное значение на кубике и начальное значение для генератора случайных чисел (seed)
    Dice(unsigned max, unsigned seed) :
        max(max), dstr(1, max), reng(seed) {}
    
    // Реализация метода roll, возвращающая случайное число от 1 до max
    unsigned roll() override {
        return dstr(reng);  // Генерируем случайное число
    }

private:
    unsigned max;  // Максимальное значение (количество граней кубика)
    std::uniform_int_distribution<unsigned> dstr;  // Объект для распределения случайных чисел от 1 до max
    std::default_random_engine reng;  // Генератор случайных чисел
};

// Класс PenaltyDice для моделирования штрафного броска
// Выбирает минимальное значение из двух бросков кубика
class PenaltyDice : public AbstractDice {
public:
    // Конструктор принимает кубик, который будет использоваться для бросков
    PenaltyDice(AbstractDice &dice) :
        dice(dice) {}
    
    // Метод roll возвращает наименьшее из двух бросков кубика
    unsigned roll() override {
        auto first = dice.roll(), second = dice.roll();  // Выполняем два броска
        return first <= second ? first : second;  // Возвращаем наименьший результат
    }

private:
    AbstractDice &dice;  // Ссылка на объект кубика, который используется для бросков
};

// Класс BonusDice для моделирования бонусного броска
// Выбирает максимальное значение из двух бросков кубика
class BonusDice : public AbstractDice {
public:
    // Конструктор принимает кубик, который будет использоваться для бросков
    BonusDice(AbstractDice &dice) :
        dice(dice) {}
    
    // Метод roll возвращает наибольшее из двух бросков кубика
    unsigned roll() override {
        auto first = dice.roll(), second = dice.roll();  // Выполняем два броска
        return first >= second ? first : second;  // Возвращаем наибольший результат
    }

private:
    AbstractDice &dice;  // Ссылка на объект кубика, который используется для бросков
};

// Класс ThreeDicePool моделирует бросок трёх кубиков и возвращает сумму их значений
class ThreeDicePool : public AbstractDice {
public:
    // Конструктор принимает три объекта кубиков, которые будут использоваться для бросков
    ThreeDicePool(AbstractDice &dice_1, AbstractDice &dice_2, AbstractDice &dice_3) :
        dice_1(dice_1), dice_2(dice_2), dice_3(dice_3) {}

    // Метод roll возвращает сумму трёх бросков кубиков
    unsigned roll() override {
        return dice_1.roll() + dice_2.roll() + dice_3.roll();  // Суммируем результаты бросков трёх кубиков
    }

private:
    AbstractDice &dice_1, &dice_2, &dice_3;  // Ссылки на три кубика
};

// Функция для вычисления вероятности выпадения определённого значения value за number_of_rolls попыток
double value_probabilty(AbstractDice &d, unsigned value, unsigned number_of_rolls = 1) {
    unsigned accum = 0;  // Счётчик количества попаданий
    // Выполняем number_of_rolls бросков кубика
    for (unsigned cnt = 0; cnt != number_of_rolls; ++cnt) {
        if (d.roll() == value) accum += 1;  // Если выпало нужное значение, увеличиваем счётчик
    }
    return static_cast<double>(accum) / number_of_rolls;  // Возвращаем вероятность как отношение попаданий к общему числу бросков
}
